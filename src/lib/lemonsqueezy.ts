// src/lib/lemonsqueezy.ts

/**
 * Lemonsqueezy API Interaction
 * This module provides a wrapper for interacting with the Lemonsqueezy API.
 */

const LEMONSQUEEZY_API_KEY = process.env.LEMONSQUEEZY_API_KEY;
const LEMONSQUEEZY_STORE_ID = process.env.LEMONSQUEEZY_STORE_ID;
const LEMONSQUEEZY_API_BASE_URL = 'https://api.lemonsqueezy.com/v1';

interface CreateCheckoutParams {
  variantId: string;
  organizationId: string;
  creditPurchaseId: string;
  userEmail?: string;
  userName?: string;
  // redirectUrl?: string; // Custom redirect URL can be specified per checkout
}

interface CreateCheckoutResponse {
  checkout_url?: string;
  error?: string;
}

/**
 * Creates a Lemonsqueezy checkout session for a given product variant.
 *
 * @param params - The parameters for creating the checkout.
 * @param params.variantId - The ID of the Lemonsqueezy product variant to purchase.
 * @param params.organizationId - Your internal organization ID.
 * @param params.creditPurchaseId - A unique ID generated by your system for this purchase attempt.
 * @param params.userEmail - (Optional) Pre-fill the customer's email.
 * @param params.userName - (Optional) Pre-fill the customer's name.
 * @returns An object containing the checkout_url or an error message.
 */
export async function createCheckout({
  variantId,
  organizationId,
  creditPurchaseId,
  userEmail,
  userName,
}: CreateCheckoutParams): Promise<CreateCheckoutResponse> {
  if (!LEMONSQUEEZY_API_KEY || !LEMONSQUEEZY_STORE_ID) {
    console.error('Lemonsqueezy API Key or Store ID is not configured in environment variables.');
    return { error: 'Lemonsqueezy API key or Store ID not configured.' };
  }

  const redirectUrl = `${process.env.NEXT_PUBLIC_APP_URL}/payment-status?purchase_id=${creditPurchaseId}&org_id=${organizationId}`;
  // Note: NEXT_PUBLIC_APP_URL should be defined in your .env file (e.g., http://localhost:3000 for local dev)

  const payload = {
    data: {
      type: 'checkouts',
      attributes: {
        store_id: parseInt(LEMONSQUEEZY_STORE_ID, 10), // Ensure store_id is an integer
        variant_id: parseInt(variantId, 10), // Ensure variant_id is an integer
        checkout_options: {
          redirect_url: redirectUrl,
          // embed: false, // Set to true if you want to embed the checkout
        },
        checkout_data: {
          email: userEmail, // Optional: Lemonsqueezy will use this if provided
          name: userName,   // Optional
          custom: {       // Custom data to pass through Lemonsqueezy (included in webhooks)
            organization_id: organizationId,
            credit_purchase_id: creditPurchaseId,
            client_reference_id: organizationId, // Useful for your reference in LS dashboard
          },
        },
        // product_options: { // Additional product-level options if needed
        //   receipt_button_text: "Go to Dashboard",
        //   receipt_thank_you_note: "Thank you for your purchase!",
        // }
      },
      relationships: { // Required relationship even if just store_id/variant_id are in attributes
        store: {
          data: {
            type: 'stores',
            id: LEMONSQUEEZY_STORE_ID.toString(),
          },
        },
        variant: {
          data: {
            type: 'variants',
            id: variantId.toString(),
          },
        },
      },
    },
  };

  console.log(`Creating Lemonsqueezy checkout with payload for org: ${organizationId}, purchase ID: ${creditPurchaseId}, variant: ${variantId}`);
  // console.log('Payload:', JSON.stringify(payload, null, 2)); // For debugging

  try {
    const response = await fetch(`${LEMONSQUEEZY_API_BASE_URL}/checkouts`, {
      method: 'POST',
      headers: {
        'Accept': 'application/vnd.api+json',
        'Content-Type': 'application/vnd.api+json',
        'Authorization': `Bearer ${LEMONSQUEEZY_API_KEY}`,
      },
      body: JSON.stringify(payload),
    });

    const responseData = await response.json();

    if (!response.ok) {
      // Lemonsqueezy typically returns errors in JSON:API format
      const errorMessage = responseData.errors?.[0]?.detail || 'Failed to create Lemonsqueezy checkout.';
      console.error(`Lemonsqueezy API error (Status: ${response.status}):`, JSON.stringify(responseData, null, 2));
      return { error: errorMessage };
    }

    // Assuming success (e.g., 201 Created)
    const checkoutUrl = responseData.data?.attributes?.url;
    if (!checkoutUrl) {
      console.error('Lemonsqueezy response did not contain checkout URL:', JSON.stringify(responseData, null, 2));
      return { error: 'Failed to retrieve checkout URL from Lemonsqueezy response.' };
    }

    console.log(`Successfully created Lemonsqueezy checkout. URL: ${checkoutUrl}`);
    return { checkout_url: checkoutUrl };

  } catch (error) {
    console.error('Network or other error creating Lemonsqueezy checkout:', error);
    // Check if error is an instance of Error to safely access message property
    const message = error instanceof Error ? error.message : 'An unknown error occurred.';
    return { error: `Failed to create Lemonsqueezy checkout: ${message}` };
  }
}

// Example of how this might be further organized into a client class if more methods were added:
//
// export class LemonSqueezyClient {
//   private apiKey: string;
//   private storeId: string;
//   private baseUrl: string = 'https://api.lemonsqueezy.com/v1';
//
//   constructor(apiKey: string, storeId: string) {
//     if (!apiKey || !storeId) {
//       throw new Error('Lemonsqueezy API Key and Store ID are required.');
//     }
//     this.apiKey = apiKey;
//     this.storeId = storeId;
//   }
//
//   async createCheckout(params: CreateCheckoutParams): Promise<CreateCheckoutResponse> {
//     // ... implementation using this.apiKey, this.storeId, this.baseUrl ...
//     // ... payload construction ...
//     // ... fetch call ...
//     return { checkout_url: "dummy_url_from_class_method" };
//   }
//
//   // ... other methods like getOrder, listProducts, etc.
// }
//
// // Singleton instance or factory function
// let lemonsqueezyClientInstance: LemonSqueezyClient | null = null;
//
// export function getLemonSqueezyClient(): LemonSqueezyClient {
//   if (!LEMONSQUEEZY_API_KEY || !LEMONSQUEEZY_STORE_ID) {
//     throw new Error('Lemonsqueezy API Key or Store ID not configured for client initialization.');
//   }
//   if (!lemonsqueezyClientInstance) {
//     lemonsqueezyClientInstance = new LemonSqueezyClient(LEMONSQUEEZY_API_KEY, LEMONSQUEEZY_STORE_ID);
//   }
//   return lemonsqueezyClientInstance;
// }
//
// // Then the exported function could be:
// // export async function createCheckout(params: CreateCheckoutParams): Promise<CreateCheckoutResponse> {
// //   try {
// //     const client = getLemonSqueezyClient();
// //     return client.createCheckout(params);
// //   } catch (error) {
// //     const message = error instanceof Error ? error.message : 'An unknown error occurred during client operation.';
// //     return { error: message };
// //   }
// // }
